Traceback (most recent call last):
  File "/home/sean/Documents/Work/CDS_book/book/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/home/sean/Documents/Work/CDS_book/book/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/sean/Documents/Work/CDS_book/book/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/home/sean/Documents/Work/CDS_book/book/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/lib/python3.10/asyncio/base_events.py", line 646, in run_until_complete
    return future.result()
  File "/home/sean/Documents/Work/CDS_book/book/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/home/sean/Documents/Work/CDS_book/book/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/sean/Documents/Work/CDS_book/book/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------

max_alt = 10000  # Alt strat stop
SBC = cst.physical_constants["Stefan-Boltzmann constant"][0]
olr = SBC * 2 * isa.get_temperature(max_alt) ** 4
points = 100
altitudes = np.linspace(0, max_alt, points, dtype=float)
taus_inf = np.logspace(-2, 1, 8)
isa_temp_profile = isa.get_temperature(altitudes)


def ground_gas_temp(tau_inf: float) -> float:
    """
    Returns the ground temperature for a particular optical thickness of the
    whole atmosphere tau_infinity.
    Args:
        tau_inf: The total optical Thickness of the atmosphere.

    Returns:
        t_ground

    """
    t_ground = ((1 + tau_inf) * olr / (2 * SBC)) ** 0.25
    return t_ground


def ground_temp(tau_inf: float) -> float:
    """
    Returns The surface temperature of the planet assuming radiative equilibruim as a function of
    Args:
        tau_inf:

    Returns:

    """
    t_ground = ((2 + tau_inf) * olr / (2 * SBC)) ** 0.25
    return t_ground


plt.semilogx(
    taus_inf,
    ground_gas_temp(taus_inf),
    c=colours.durham.ink,
    label="Grey gas temperature at ground level",
)
plt.semilogx(
    taus_inf,
    ground_temp(taus_inf),
    c=colours.durham.purple,
    label="Surface Temperature",
)
plt.semilogx(
    taus_inf,
    [isa.get_temperature(0) for i in taus_inf],
    linestyle="--",
    c=colours.durham.ink,
    label="Earth Surface Temperature",
)
plt.legend()
plt.xlabel(r"Total atmosphere optical thickness: $\tau_{\infty}$")
plt.ylabel("Temperature (K)")i;

------------------

[0;36m  Input [0;32mIn [2][0;36m[0m
[0;31m    plt.ylabel("Temperature (K)")i;[0m
[0m                                 ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (1032359234.py, line 59)

